name: Pack & Auto Release Stock Monitor

on:
  push:
    paths:
      - 'main.py'
      - 'requirements.txt'
      - 'stock_basic.json'
      - 'theme_config.json'
      - 'icon.ico'
      - 'icon.png'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pywin32 easyquotation

    - name: Find easyquotation stock_codes.conf
      id: find_eq
      run: |
        python -c "import easyquotation, os; print(os.path.dirname(easyquotation.__file__))" > eq_path.txt
        $EQPATH = Get-Content eq_path.txt | Select-Object -First 1
        echo "EQPATH=$EQPATH" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Build with PyInstaller
      run: |
        pyinstaller -y -w -i icon.ico -n stock_monitor main.py `
          --add-data "$env:EQPATH\stock_codes.conf;easyquotation" `
          --add-data "stock_basic.json;." `
          --add-data "theme_config.json;." `
          --add-data "icon.png;." `
          --add-data "icon.ico;."

    - name: List dist directory
      run: |
        ls dist

    - name: Zip artifact (entire stock_monitor folder)
      run: |
        powershell Compress-Archive -Path dist/stock_monitor/* -DestinationPath stock_monitor.zip

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: stock-monitor
        path: stock_monitor.zip

    - name: Write version extract script
      shell: bash
      run: |
        echo "import re" > get_version.py
        echo "s=open('main.py',encoding='utf-8').read()" >> get_version.py
        echo "m=re.search(r\"APP_VERSION\\s*=\\s*['\\\"](v[\\d\\.]+)['\\\"]\", s)" >> get_version.py
        echo "print(f'version={m.group(1)}' if m else 'version=unknown')" >> get_version.py

    - name: Get version from main.py
      id: get_version
      shell: bash
      run: |
        version=$(python get_version.py)
        echo "version=${version#version=}" >> $GITHUB_OUTPUT

    - name: Extract changelog from main.py
      id: changelog
      shell: python
      run: |
        import sys, re, os
        sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1)
        with open('main.py', encoding='utf-8') as f:
            s = f.read()
        logs = re.findall(r"# v([\d\.]+)\n((?:# .+\n)+)", s)
        if logs:
            all_logs = []
            for ver, log in logs:
                log_fmt = log.replace('# ', '').strip().replace('\n', '\n- ')
                all_logs.append(f"### v{ver} 更新内容\n- {log_fmt}")
            all_logs = all_logs[::-1]  # 新版本在前
            with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as f:
                f.write('changelog<<EOF\n' + "\n\n".join(all_logs) + '\nEOF\n')
        else:
            with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as f:
                f.write('changelog=无更新日志\n')

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: stock_monitor.zip
        tag_name: stock_monitor_${{ steps.get_version.outputs.version }}
        name: stock_monitor_${{ steps.get_version.outputs.version }}
        body: |
          🤖 stock_monitor_${{ steps.get_version.outputs.version }} 发布说明

          > **本软件完全由AI自动开发，开发者零基础，所有功能均由AI智能生成。**

          ${{ steps.changelog.outputs.changelog }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 